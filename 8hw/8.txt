1
Definiáljuk a pairsWithPred függvényt, ami vár:

egy olyan függvényt, amely két azonos típusú elemből Boolba képez,
illetve egy ugyanolyan típusú listát, és felsorolja az összes olyan, a lista (akár azonos) elemeiből alkotott rendezett párt, amire igaz a függvény.
pairsWithPred :: (a -> a -> Bool) -> [a] -> [(a,a)]
pairsWithPred (<=) [1..5] == [(1,1),(1,2),(1,3),(1,4),(1,5),(2,2),(2,3),(2,4),(2,5),(3,3),(3,4),(3,5),(4,4),(4,5),(5,5)]
pairsWithPred (<=) [1,1,1] == [(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)]
pairsWithPred (\ ls1 ls2 -> (lenght ls1) == (lenght ls2)) ["aaa", "bb", "ccc"] == [("aaa","aaa"),("aaa","ccc"),("bb","bb"),("ccc","aaa"),("ccc","ccc")]
2
Definiáljuk a appLeftOrRight függvényt, amely egy predikátum alapján a listákból válogatva applikálja a kapott függvényeket! Ha a predikátum igaz, az első paraméterként kapott listából vegyük a függvényt, ha hamis akkor pedig a másodikból! A másik elemet pedig dobjuk el!

appLeftOrRight :: [a -> b] -> [a -> b] -> (a -> Bool) -> [a] -> [b]
appLeftOrRight [(+1),(+2),(+3)] [(*2),(*3),(*4)] (>5) [4,5,6] == [8,15,9]
appLeftOrRight [(+1),(+2),(+3)] [(*2),(*3)] (>10) [] == []
appLeftOrRight [(+1),(+2),(+3)] [(*2),(*3)] (== 2) [1..] == [2, 4]
appLeftOrRight [undefined] (repeat id) (const False) ["apple", "banana", "cherry"] == ["apple"]
appLeftOrRight [] [(+x) | x <- [1..]] (<4) [1..10] == []
appLeftOrRight (repeat $ const 0) [(*x) | x <- [2..]] (\a -> mod a 3 == 0) [1..10] == [2,6,0,20,30,0,56,72,0,110]
take 10 (appLeftOrRight (repeat (+1)) (repeat (*2)) (>0) (iterate negate 2)) == [3,-4,3,-4,3,-4,3,-4,3,-4]
3
Töröljünk egy elemet egy listából az összes lehetséges módon!

Csak magasabbrendű függvényeket használj
deletions :: [a] -> [[a]]
null (deletions [])
deletions [1] == [[]]
deletions [1,2,3,2] == [[2, 3, 2], [1, 3, 2], [1, 2, 2], [1, 2, 3]]
deletions "alma"  == ["lma", "ama", "ala", "alm"]
take 10 (deletions [1..] !! 1) == [1, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Adott egy [a -> a -> Bool] lista, egy (zárt) intervallum kezdő- és végpontja, valamint egy a érték. Definiáljuk azt a függvényt, ami a megadott a értékhez legenerálja az összes lehetséges értéket az intervallumon belül úgy, hogy az [a -> a -> Bool] lista összes eleme igaz értékkel térjen vissza erre a két paraméterre alkalmazva.

secondParam :: Integral a => [a -> a -> Bool] -> (a,a) -> a -> [a]
4
secondParam [(>=), (<=), (==)] (54,73) 65 == [65]
secondParam [(>), (\x y -> even (x + y)), (\_ _-> True)] (80,100) 90 == [80, 82, 84, 86, 88]
secondParam [(\x y -> (x + 10) > y), (\x y -> odd y)] (60,88) 58 == [61,63,65,67]
secondParam [(\x y -> x `mod` 2 == 0), (\x y -> x > y)] (40,50) 52 == [40,41,42,43,44,45,46,47,48,49,50]
secondParam [] (10,12) 0 == [10,11,12]
secondParam [(\x y -> odd x), (\x y -> (x + y) > 10)] (21,54) 36 == []
5
Adjuk meg azt a függvényt, amely kiszámolja egy függvény adott kezdőpontból indított fixpontját! Ez azt jelenti, hogy a függvényt addig alkalmazza az adott értékre, amíg az változik. Amint egymásután kétszer ugyanaz az érték következik, a függvény leáll, és visszaadja az aktuális értéket.

fixPoint :: Eq a => (a -> a) -> a -> a
fixPoint (drop 1) [1..10] == [] 
fixPoint sqrt 100 == 1